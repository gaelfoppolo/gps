#include <__cross_studio_io.h>
#include <msp430x16x.h>

#include "gps.h"
#include "parser_nmea.h"

char trames[NUMBERS_OF_TRAME_MAX][NMEA_MAX_LENGTH];
char c;
unsigned int iGPS, line, column, nbTrames;

/**
 * @brief      Toggle GPS
 */
void toggleGPS(unsigned int state);

/**
 * @brief      Enable and config USART for GPS
 */
void enableUSARTforGPS(void);

/**
 * @brief      Send trames to GPS to configure it (interrupt mode)
 *
 * @param      message  Message to send (end by \r\n)
 */
void gpsSend(char* message);

/**
 * @brief      Receive function for GPS data (USART0, interrupt mode)
 */
void usart0_rx(void);

void toggleGPS(unsigned int state) {
	// P4,0
	if (state == 1)	P4OUT |= 0x01;
	else P4OUT &= ~0x01;
	if(P4OUT & BIT0) {
		debug_printf("GPS active\n");
	} else {
		debug_printf("GPS désactive\n");
	}
}

void enableUSARTforGPS(void) {
	
	// mise à zéro de l'UART
	UCTL0 = SWRST;

	// 8-bits char
	UCTL0 = CHAR;  
	// USART Transmit Control Register              
    // BRCLK = SMCLK (page 272)
    UTCTL0 = SSEL1;                   
    
    // Config baud rate at 9600
    // 8MHz/9600 ~ 833
    U0BR0 = 0x41;                         
    U0BR1 = 0x03;

    // modulation
    UMCTL0 = 0x21;
    
    // enable USART0 RX/TX
    ME1 = URXE0 + UTXE0; 

	// enable USART0 RX interrupt
    IE1 = URXE0; 

    // UART configured
   	UCTL0 &= ~SWRST;     

    //P3.4,5 enabled
    P3SEL = 0x30; 
    
    // P3.4 output = 1 (TX) direction
    // P3.5 input = 0 (RX) direction    
    P3DIR = 0x10;

    // P4,0 (ENABLE_GPS) and P4,2 (CMD_SWITCH)
    P4DIR = 0x05;
}

void gpsSend(char* message){
	debug_printf("usart0 tx send\n");
	iGPS = 0;
	while (message[iGPS] != '\0') {
		// waiting buffer ready
		while((IFG1 & UTXIFG0) == 0);
		TXBUF0 = message[iGPS++];
	}
	debug_printf("send\n");
}

void usart0_rx(void) __interrupt[UART0RX_VECTOR] {
	debug_printf("usart0 rx interrupt\n");
	
	// reset buffer
	line = 0, column = 0, nbTrames = 0;
	memset(trames, 0, sizeof trames);

	while (line < NUMBERS_OF_TRAME) {
		// wait begin of trame ($) if new line
		// else just wait new char
		if(column == 0) {
			do {
				while (!(IFG1 & URXIFG0));
				c = RXBUF0; // or RXBUF0;
			} while (c != '$');
		}
		else {
			while (!(IFG1 & URXIFG0));
			c = RXBUF0; // or RXBUF0;
		}

		trames[line][column++] = c;
		
		// end of line, update 
		if (c == '\n') {
			line++;
			column = 0;
		}
	}

	// print trame
	debug_printf("nb trames clean = %d\n", line);
	for(iGPS = 0; iGPS < line; iGPS++) {
        debug_printf("message = %s", trames[iGPS]);
        // minmea_sentence_id(trames[iGPS]);
        switch (minmea_sentence_id(trames[iGPS])) {
            case MINMEA_SENTENCE_RMC: {
            	debug_printf("okay\n");
                struct minmea_sentence_rmc frame;
                if (minmea_parse_rmc(&frame, trames[iGPS])) {
                    debug_printf("$xxRMC: raw coordinates and speed: (%d/%d,%d/%d) %d/%d\n",
                            frame.latitude.value, frame.latitude.scale,
                            frame.longitude.value, frame.longitude.scale,
                            frame.speed.value, frame.speed.scale);
                    // debug_printf("$xxRMC fixed-point coordinates and speed scaled to three decimal places: (%d,%d) %d\n",
                    //         minmea_rescale(&frame.latitude, 1000),
                    //         minmea_rescale(&frame.longitude, 1000),
                    //         minmea_rescale(&frame.speed, 1000));
                    // debug_printf("$xxRMC floating point degree coordinates and speed: (%f,%f) %f\n",
                    //         minmea_tocoord(&frame.latitude),
                    //         minmea_tocoord(&frame.longitude),
                    //         minmea_tofloat(&frame.speed));
                }
                else {
                    debug_printf("$xxRMC sentence is not parsed\n");
                }
            } break;

            case MINMEA_INVALID: {
                debug_printf("$xxxxx sentence is not valid\n");
            } break;

            default: {
                debug_printf("$xxxxx sentence is not parsed\n");
            } break;
        }
    }

}
