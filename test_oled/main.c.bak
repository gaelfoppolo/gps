#include <__cross_studio_io.h>
#include  <msp430x16x.h>

unsigned int delay(unsigned int x) {
    unsigned int i, j;
    for (i = 0; i<= x; i++) {    }
    debug_printf("end delay\n");   
    return 0;
}

void main(void){ 
    int i;
    WDTCTL = WDTPW + WDTHOLD;             // Stop watchdog timer
    
    BCSCTL1 &= ~XT2OFF;                  // XT2 est allumé
    
    do {
        IFG1 &= ~OFIFG;                  // Clear OSCFault flag
        for (i = 0xFF; i > 0; i--);      // Time for flag to set
    }while ( (IFG1 & OFIFG) != 0);       // OSCFault flag still set?    
                
    BCSCTL2 |= SELM1+SELS;               // MCLK = SMCLK = XT2 (safe) avec SMCLK = 8Mhz  

    //  Configuration de l'USART0
    UCTL0 = SWRST;                       // mise à 0 de l'UART (la doc dit de le faire mais l'exemple ne le fait pas! WTF)
    UCTL0 |= CHAR;                       // Format des caractères sur 8-bits
    UTCTL0 |= SSEL1;                     // UCLK = SMCLK
    
    //  Configuration de l'USART1
    UCTL1 = SWRST;                       // mise à 0 de l'UART (la doc dit de le faire mais l'exemple ne le fait pas! WTF)
    UCTL1 |= CHAR;                       // Format des caractères sur 8-bits
    UTCTL1 |= SSEL1;                     // UCLK = SMCLK

    // Config du taux de transmission pour 9600 bauds
    U0BR0 = 0x41;                        // 8MHz/9600 ~ 833
    U0BR1 = 0x03;                      
    UMCTL0 = 0x21;                       // no modulation

    U1BR0 = 0x41;                        // 8MHz/9600 ~ 833
    U1BR1 = 0x03;                      
    UMCTL1 = 0x21;                       // no modulation

    UCTL0 &= ~SWRST;                     // Fin de l'état de reset de l'UART0
    UCTL1 &= ~SWRST;                     // Fin de l'état de reset de l'UART1

    // activation transmission et récéption
    ME1 |= URXE0 | UTXE0;                // Enable USART0 TXD/RXD
    IE1 |= URXIE0 ;                      // Enable USART0 RX interrup

    ME2 |= URXE1 | UTXE1;                // Enable USART1 TXD/RXD
    IE2 |= URXIE1 ;                      // Enable USART1 RX interrup

    // Config des pins
    P3SEL |= 0xF0;                       // P3.4,5,6,7 = USART0/1 TXD/RXD
    
    P3DIR |= 0x10;                       // P3.4 output direction
    P3DIR &= ~0x20;                      // P3.5 input direction
    P3DIR |= 0x40;                       // P3.6 output direction
    P3DIR &= ~0x80;                      // P3.7 input direction

    // activation des interruptions pour la réception
    _EINT();
    
    // P4,0 et 2 en sortie (0 : ENABLE_GPS, 1:RESET_LCD, 2 : CMD_SWITCH)
    P4DIR = 0x07;
    P4OUT = BIT2 | BIT1;
    delay(10000);
    P4OUT = BIT2 ;
    delay(10000);
    P4OUT = BIT2 | BIT1;

    // programme principal
    while(1){}
    debug_exit(0);
}

void usart0_rx (void) __interrupt[USART0RX_VECTOR]{  
    while (!(IFG2 & UTXIFG1));
    TXBUF1 = RXBUF0;
}

void usart1_rx (void) __interrupt[USART1RX_VECTOR]{   
    while (!(IFG1 & UTXIFG0));
    TXBUF0 = RXBUF1;
}
